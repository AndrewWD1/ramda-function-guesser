{"version":3,"sources":["utils/guesser.ts","redux/action-types.ts","redux/reducer.ts","redux/store.ts","Containers/args/args.container.tsx","redux/actions.ts","Containers/output/output.container.tsx","App.tsx","index.tsx"],"names":["javascriptTypes","string","number","boolean","object","function","array","parseNumber","value","Number","parseBoolean","parseFunction","eval","parseObject","JSON","parse","parseArray","parseArg","arg","type","error","ramdaTester","args","expectedOutput","possibleGuesses","newArr","map","newExpectedOutput","method","R","result","push","ActionTypes","INTIAL_STATE","guess","store","createStore","state","action","payload","slice","length","window","__REDUX_DEVTOOLS_EXTENSION__","Input","styled","input","ArgsWrapper","div","SingleArgWrapper","ButtonWrapper","Button","connect","dispatch","setArgs","newArgs","addArgument","removeArgument","index","name","selectedValue","onChange","x","style","display","justifyContent","width","key","e","target","onClick","OutputWrapper","setExpectedOutput","setGuess","newGuess","color","rel","href","WholeApp","AppWrapper","main","App","className","margin","borderRadius","backgroundColor","role","data-toggle","data-target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65255559.chunk.js","sourcesContent":["import * as R from \"ramda\";\n\nexport const javascriptTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  function: \"function\",\n  array: \"array\"\n};\n\nconst parseNumber = (value: string) => Number(value);\n\nconst parseBoolean = (value: string) => {\n  if (value === \"false\") return false;\n  if (value === \"true\") return true;\n  return !!value;\n};\n\n// eslint-disable-next-line\nconst parseFunction = (value: string) => eval(value);\n\nconst parseObject = (value: string) => JSON.parse(value);\n\nconst parseArray = (value: string) => JSON.parse(value);\n\nexport const parseArg = (arg: { value: string; type: string }): any => {\n  try {\n    switch (arg.type) {\n      case javascriptTypes.string:\n        return arg.value;\n      case javascriptTypes.number:\n        return parseNumber(arg.value);\n      case javascriptTypes.boolean:\n        return parseBoolean(arg.value);\n      case javascriptTypes.object:\n        return parseObject(arg.value);\n      case javascriptTypes.function:\n        return parseFunction(arg.value);\n      case javascriptTypes.array:\n        return parseArray(arg.value);\n    }\n  } catch (error) {}\n};\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  const newArr = args.map(parseArg);\n  let newExpectedOutput = parseArg(expectedOutput);\n\n  for (const method in R) {\n    try {\n      let result = (R as any)[method](...newArr);\n      // eslint-disable-next-line\n      if (R.equals(result, newExpectedOutput) || result == newExpectedOutput) {\n        possibleGuesses.push(method);\n      }\n    } catch (error) {}\n  }\n\n  return possibleGuesses;\n};\n","export const ActionTypes = {\n  SET_ARGS: \"SET_ARGS\",\n  SET_EXPECTED_OUTPUT: \"SET_EXPECTED_OUTPUT\",\n  SET_GUESS: \"SET_GUESS\",\n  ADD_ARGUMENT: \"ADD_ARGUMENT\",\n  REMOVE_ARGUMENT: \"REMOVE_ARGUMENT\"\n};\n","import { ActionTypes } from \"./action-types\";\nimport { javascriptTypes } from \"../utils/guesser\";\n\ninterface arg {\n  value: any;\n  type: string;\n}\n\nconst INTIAL_STATE = {\n  args: [{ value: \"value\", type: javascriptTypes.string }],\n  expectedOutput: { type: javascriptTypes.string, value: \"Expected Output\" },\n  guess: [] as any[]\n};\n\nexport const reducer = (\n  state = INTIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_ARGS:\n      return {\n        ...state,\n        args: action.payload\n      };\n    case ActionTypes.SET_EXPECTED_OUTPUT:\n      return {\n        ...state,\n        expectedOutput: action.payload\n      };\n    case ActionTypes.SET_GUESS:\n      return {\n        ...state,\n        guess: action.payload\n      };\n    case ActionTypes.ADD_ARGUMENT:\n      return {\n        ...state,\n        args: [...state.args, { value: \"value\", type: javascriptTypes.string }]\n      };\n    case ActionTypes.REMOVE_ARGUMENT:\n      return {\n        ...state,\n        args: state.args.slice(0, state.args.length - 1)\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n\nimport { reducer } from \"./reducer\";\n\nexport const store = createStore(\n  reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setArgs, addArgument, removeArgument } from \"../../redux/actions\";\nimport * as R from \"ramda\";\nimport { RadioGroup, Radio } from \"react-radio-group\";\n\nconst Input = styled.input`\n  font-weight: bold;\n  border-radius: 3px;\n`;\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 49vw;\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 50vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  color: white;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n  color: white;\n`;\n\ninterface IProps {\n  args: any[];\n  setArgs: Function;\n  addArgument: Function;\n  removeArgument: Function;\n}\n\nconst ArgsContainer: React.FC<IProps> = ({\n  args,\n  setArgs,\n  addArgument,\n  removeArgument\n}) => {\n  return (\n    <ArgsWrapper>\n      {args.map((arg, index) => (\n        <SingleArgWrapper>\n          <RadioGroup\n            name={`${index}-type`}\n            selectedValue={arg.type}\n            onChange={(value: string) => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    type: value\n                  }),\n                  args\n                )\n              );\n            }}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n              width: \"70%\"\n            }}\n          >\n            <label>\n              <Radio value=\"string\" />\n              String\n            </label>\n            <label>\n              <Radio value=\"number\" />\n              number\n            </label>\n            <label>\n              <Radio value=\"boolean\" />\n              boolean\n            </label>\n            <label>\n              <Radio value=\"object\" />\n              object\n            </label>\n            <label>\n              <Radio value=\"function\" />\n              function\n            </label>\n            <label>\n              <Radio value=\"array\" />\n              array\n            </label>\n          </RadioGroup>\n          <Input\n            type=\"text\"\n            value={arg.value}\n            key={index}\n            onChange={e => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    value: e.target.value\n                  }),\n                  args\n                )\n              );\n            }}\n          />\n        </SingleArgWrapper>\n      ))}\n      <ButtonWrapper>\n        <Button onClick={() => addArgument()}>Add an Argument</Button>\n        <Button onClick={() => removeArgument()}>Remove an argument</Button>\n      </ButtonWrapper>\n    </ArgsWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setArgs: (newArgs: any[]) => dispatch(setArgs(newArgs)),\n  addArgument: () => dispatch(addArgument()),\n  removeArgument: () => dispatch(removeArgument())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArgsContainer);\n","import { ActionTypes } from \"./action-types\";\n\nexport const setArgs = (newArgs: any[]) => ({\n  type: ActionTypes.SET_ARGS,\n  payload: newArgs\n});\n\nexport const setExpectedOutput = (newExpectedOutput: any) => ({\n  type: ActionTypes.SET_EXPECTED_OUTPUT,\n  payload: newExpectedOutput\n});\n\nexport const setGuess = (guess: any[]) => ({\n  type: ActionTypes.SET_GUESS,\n  payload: guess\n});\n\nexport const addArgument = () => ({\n  type: ActionTypes.ADD_ARGUMENT\n});\n\nexport const removeArgument = () => ({\n  type: ActionTypes.REMOVE_ARGUMENT\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setExpectedOutput, setGuess } from \"../../redux/actions\";\nimport { ramdaTester } from \"../../utils/guesser\";\nimport { RadioGroup, Radio } from \"react-radio-group\";\n\nconst Input = styled.input`\n  border-radius: 3px;\n  font-weight: bold;\n`;\n\nconst OutputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n  color: white;\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 49vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  color: white;\n`;\n\ninterface IProps {\n  args: any[];\n  expectedOutput: { type: \"string\"; value: \"string\" };\n  setExpectedOutput: Function;\n  guess: any[];\n  setGuess: Function;\n}\n\nconst OutputContainer: React.FC<IProps> = ({\n  args,\n  expectedOutput,\n  setExpectedOutput,\n  guess,\n  setGuess\n}) => {\n  return (\n    <OutputWrapper>\n      <SingleArgWrapper>\n        <RadioGroup\n          name={`output-type`}\n          selectedValue={expectedOutput.type}\n          onChange={(value: string) => {\n            setExpectedOutput({\n              ...expectedOutput,\n              type: value\n            });\n          }}\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            width: \"70%\"\n          }}\n        >\n          <label>\n            <Radio value=\"string\" />\n            String\n          </label>\n          <label>\n            <Radio value=\"number\" />\n            number\n          </label>\n          <label>\n            <Radio value=\"boolean\" />\n            boolean\n          </label>\n          <label>\n            <Radio value=\"object\" />\n            object\n          </label>\n          <label>\n            <Radio value=\"function\" />\n            function\n          </label>\n          <label>\n            <Radio value=\"array\" />\n            array\n          </label>\n        </RadioGroup>\n        <Input\n          type=\"text\"\n          value={expectedOutput.value}\n          onChange={e =>\n            setExpectedOutput({\n              ...expectedOutput,\n              value: e.target.value\n            })\n          }\n        />\n      </SingleArgWrapper>\n      <Button onClick={() => setGuess(ramdaTester(args, expectedOutput))}>\n        Test\n      </Button>\n      {guess.map(x => (\n        <div style={{ color: \"white\" }}>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://ramdajs.com/docs/#${x}`}\n          >\n            {x}\n          </a>\n        </div>\n      ))}\n    </OutputWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args,\n  expectedOutput: state.expectedOutput,\n  guess: state.guess\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setExpectedOutput: (newExpectedOutput: any) =>\n    dispatch(setExpectedOutput(newExpectedOutput)),\n  setGuess: (newGuess: any[]) => dispatch(setGuess(newGuess))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ArgsContainer from \"./Containers/args/args.container\";\nimport OutputContainer from \"./Containers/output/output.container\";\n\nconst WholeApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100vw;\n  min-height: 100vh;\n  height: 100%;\n  background-color: #282a36;\n`;\n\nconst App = () => {\n  return (\n    <WholeApp>\n      <div\n        className=\"navbar navbar-inverse\"\n        style={{ margin: \"0\", borderRadius: \"0px\", backgroundColor: \"#884499\" }}\n        role=\"navigation\"\n      >\n        <div className=\"navbar-header\">\n          <button\n            type=\"button\"\n            className=\"navbar-toggle\"\n            data-toggle=\"collapse\"\n            data-target=\".navbar-collapse\"\n          >\n            <span className=\"sr-only\">Toggle navigation</span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n          </button>\n          <a className=\"navbar-brand\" href=\"http://ramdajs.com\">\n            <strong>Ramda </strong>\n            <span className=\"version\">v0.27.0</span>\n          </a>\n        </div>\n        <div className=\"navbar-collapse collapse\"></div>\n      </div>\n      <AppWrapper>\n        <ArgsContainer />\n        <OutputContainer />\n      </AppWrapper>\n    </WholeApp>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}