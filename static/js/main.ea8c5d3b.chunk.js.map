{"version":3,"sources":["utils/guesser.ts","redux/action-types.ts","redux/reducer.ts","redux/store.ts","Components/custom-button/custom-button.component.tsx","Components/hamburger-button/hamburger-button.component.tsx","Components/draggable-arg/draggable-arg.component.tsx","Containers/args/args.container.tsx","redux/actions.ts","Containers/output/output.container.tsx","App.tsx","index.tsx"],"names":["javascriptTypes","string","number","boolean","object","function","array","parseNumber","value","Number","parseBoolean","parseFunction","eval","parseObject","JSON","parse","parseArray","parseArg","arg","type","toLowerCase","error","ramdaTester","args","expectedOutput","possibleGuesses","newArr","map","newExpectedOutput","method","R","result","push","ActionTypes","INTIAL_STATE","id","guess","nextId","store","createStore","state","action","payload","slice","length","window","__REDUX_DEVTOOLS_EXTENSION__","Button","styled","div","HamburgerButtonWrapper","HamburgerLine","HamburgerButton","ref","Input","input","SingleArgWrapper","isMobile","css","Select","select","DraggableArg","index","moveCard","setArgs","useRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","opacity","isDragging","drag","preview","key","onChange","e","x","target","ArgsWrapper","ButtonWrapper","connect","dispatch","newArgs","addArgument","removeArgument","useCallback","dragCard","update","$splice","onClick","style","color","fontSize","OutputWrapper","setExpectedOutput","setGuess","newGuess","rel","href","WholeApp","AppWrapper","main","App","className","margin","borderRadius","backgroundColor","role","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.ea8c5d3b.chunk.js","sourcesContent":["import * as R from \"ramda\";\n\nexport const javascriptTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  function: \"function\",\n  array: \"array\"\n};\n\nconst parseNumber = (value: string) => Number(value);\n\nconst parseBoolean = (value: string) => {\n  if (value === \"false\") return false;\n  if (value === \"true\") return true;\n  return !!value;\n};\n\n// eslint-disable-next-line\nconst parseFunction = (value: string) => eval(value);\n\nconst parseObject = (value: string) => JSON.parse(value);\n\nconst parseArray = (value: string) => JSON.parse(value);\n\nexport const parseArg = (arg: { value: string; type: string }): any => {\n  try {\n    switch (arg.type) {\n      case javascriptTypes.string:\n        return arg.value;\n      case javascriptTypes.number:\n        return parseNumber(arg.value);\n      case javascriptTypes.boolean:\n        return parseBoolean(arg.value.toLowerCase());\n      case javascriptTypes.object:\n        return parseObject(arg.value);\n      case javascriptTypes.function:\n        // eslint-disable-next-line\n        return parseFunction(arg.value);\n      case javascriptTypes.array:\n        return parseArray(arg.value);\n    }\n  } catch (error) {}\n};\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  const newArr = args.map(parseArg);\n  let newExpectedOutput = parseArg(expectedOutput);\n\n  for (const method in R) {\n    if (method === \"unfold\") {\n      /**\n       * !: skipping unfold for now due to memory allocation error when\n       * !: looking for a different method. The offending arguments\n       * !: are R.unfold(x => [x], [1, 2])\n       */\n    } else {\n      try {\n        let result = (R as any)[method](...newArr);\n        // eslint-disable-next-line\n        if (R.equals(result, newExpectedOutput)) {\n          possibleGuesses.push(method);\n        }\n      } catch (error) {}\n    }\n  }\n\n  return possibleGuesses;\n};\n","export const ActionTypes = {\n  SET_ARGS: \"SET_ARGS\",\n  SET_EXPECTED_OUTPUT: \"SET_EXPECTED_OUTPUT\",\n  SET_GUESS: \"SET_GUESS\",\n  ADD_ARGUMENT: \"ADD_ARGUMENT\",\n  REMOVE_ARGUMENT: \"REMOVE_ARGUMENT\"\n};\n","import { ActionTypes } from \"./action-types\";\nimport { javascriptTypes } from \"../utils/guesser\";\n\nexport interface IArg {\n  value: any;\n  type: string;\n  id: number;\n}\n\nconst INTIAL_STATE = {\n  args: [{ value: \"value\", type: javascriptTypes.string, id: 0 }],\n  expectedOutput: {\n    type: javascriptTypes.string,\n    value: \"Expected Output\",\n    id: 0\n  },\n  guess: [] as any[],\n  nextId: 1\n};\n\nexport const reducer = (\n  state = INTIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_ARGS:\n      return {\n        ...state,\n        args: action.payload\n      };\n    case ActionTypes.SET_EXPECTED_OUTPUT:\n      return {\n        ...state,\n        expectedOutput: action.payload\n      };\n    case ActionTypes.SET_GUESS:\n      return {\n        ...state,\n        guess: action.payload\n      };\n    case ActionTypes.ADD_ARGUMENT:\n      return {\n        ...state,\n        args: [\n          ...state.args,\n          { value: \"value\", type: javascriptTypes.string, id: state.nextId }\n        ],\n        nextId: state.nextId += 1\n      };\n    case ActionTypes.REMOVE_ARGUMENT:\n      return {\n        ...state,\n        args: state.args.slice(0, state.args.length - 1)\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n\nimport { reducer } from \"./reducer\";\n\nexport const store = createStore(\n  reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import styled from \"styled-components\";\n\nexport const Button = styled.div`\n  cursor: pointer;\n  background-color: #474a5e;\n  font-size: 1.6rem;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 4px 10px;\n  margin: 5px;\n  color: white;\n`;\n","import React from \"react\";\nimport { DragElementWrapper, DragSourceOptions } from \"react-dnd\";\nimport styled from \"styled-components\";\n\nconst HamburgerButtonWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 3px;\n  width: 25px;\n  cursor: pointer;\n`;\n\nconst HamburgerLine = styled.div`\n  height: 30%;\n  border-bottom: 2px solid black;\n`;\n\nconst HamburgerButton: React.FC<{\n  ref: DragElementWrapper<DragSourceOptions>;\n}> = ({ ref }) => (\n  <HamburgerButtonWrapper ref={ref}>\n    <HamburgerLine />\n    <HamburgerLine />\n    <HamburgerLine />\n  </HamburgerButtonWrapper>\n);\n\nexport default HamburgerButton;\n","import React, { useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useDrag, useDrop, DropTargetMonitor } from \"react-dnd\";\nimport { XYCoord } from \"dnd-core\";\nimport * as R from \"ramda\";\nimport { isMobile } from \"is-mobile\";\nimport HamburgerButton from \"../hamburger-button/hamburger-button.component\";\nimport { IArg } from \"../../redux/reducer\";\n\nconst Input = styled.input`\n  font-weight: bold;\n  border-radius: 3px;\n  width: 60%;\n  padding: 0 0.5rem;\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 45vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  color: white;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst Select = styled.select`\n  border-radius: 5px;\n  display: \"flex\";\n  justify-content: \"space-around\";\n  width: 30%;\n\n  &:focus {\n    border-color: #aaa;\n    box-shadow: 0 0 1px 2px rgba(59, 153, 252, 0.7);\n    box-shadow: 0 0 0 2px -moz-mac-focusring;\n    color: #222;\n    outline: none;\n  }\n`;\n\nexport interface CardProps {\n  id: any;\n  index: number;\n  moveCard: (dragIndex: number, hoverIndex: number) => void;\n  arg: IArg;\n  args: IArg[];\n  setArgs: Function;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nconst Card: React.FC<CardProps> = ({\n  id,\n  index,\n  moveCard,\n  arg,\n  args,\n  setArgs\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover(item: DragItem, monitor: DropTargetMonitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    }\n  });\n\n  const [, drag, preview] = useDrag({\n    item: { type: \"CARD\", id, index },\n    collect: (monitor: any) => ({\n      opacity: monitor.isDragging() ? 0.4 : 1\n    })\n  });\n\n  drag(drop(ref));\n  return (\n    <SingleArgWrapper ref={preview} key={`${arg.type}${index}wrapper`}>\n      {!isMobile() && <HamburgerButton ref={drag} />}\n      <Select\n        key={`${arg.type}${index}`}\n        value={arg.type}\n        onChange={e => {\n          setArgs(\n            R.adjust(\n              index,\n              x => ({\n                ...x,\n                type: e.target.value\n              }),\n              args\n            )\n          );\n        }}\n      >\n        <option value=\"string\">string</option>\n        <option value=\"number\">number</option>\n        <option value=\"boolean\">boolean</option>\n        <option value=\"object\">object</option>\n        <option value=\"function\">function</option>\n        <option value=\"array\">array</option>\n      </Select>\n      <Input\n        type=\"text\"\n        value={arg.value}\n        key={`input`}\n        onChange={e => {\n          setArgs(\n            R.adjust<IArg>(\n              index,\n              x => ({\n                ...x,\n                value: e.target.value\n              }),\n              args\n            )\n          );\n        }}\n      />\n    </SingleArgWrapper>\n  );\n};\n\nexport const DraggableArg = Card;\n","import React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setArgs, addArgument, removeArgument } from \"../../redux/actions\";\nimport { Button } from \"../../Components/custom-button/custom-button.component\";\nimport { isMobile } from \"is-mobile\";\nimport { DraggableArg } from \"../../Components/draggable-arg/draggable-arg.component\";\nimport update from \"immutability-helper\";\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 45vw;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\ninterface IProps {\n  args: any[];\n  setArgs: Function;\n  addArgument: Function;\n  removeArgument: Function;\n}\n\nconst ArgsContainer: React.FC<IProps> = ({\n  args,\n  setArgs,\n  addArgument,\n  removeArgument\n}) => {\n  const moveCard = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const dragCard = args[dragIndex];\n      setArgs(\n        update(args, {\n          $splice: [\n            [dragIndex, 1],\n            [hoverIndex, 0, dragCard]\n          ]\n        })\n      );\n    },\n    // eslint-disable-next-line\n    [args]\n  );\n\n  return (\n    <ArgsWrapper>\n      {args.map((arg, index) => (\n        <DraggableArg\n          key={arg.id}\n          id={arg.id}\n          index={index}\n          moveCard={moveCard}\n          setArgs={setArgs}\n          arg={arg}\n          args={args}\n        />\n      ))}\n      <ButtonWrapper>\n        <Button onClick={() => addArgument()}>Add an Argument</Button>\n        <Button onClick={() => removeArgument()}>Remove an argument</Button>\n      </ButtonWrapper>\n      <p style={{ color: \"white\", fontSize: \"1.1rem\" }}>\n        Enter objects in JSON format\n      </p>\n    </ArgsWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setArgs: (newArgs: any[]) => dispatch(setArgs(newArgs)),\n  addArgument: () => dispatch(addArgument()),\n  removeArgument: () => dispatch(removeArgument())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArgsContainer);\n","import { ActionTypes } from \"./action-types\";\n\nexport const setArgs = (newArgs: any[]) => ({\n  type: ActionTypes.SET_ARGS,\n  payload: newArgs\n});\n\nexport const setExpectedOutput = (newExpectedOutput: any) => ({\n  type: ActionTypes.SET_EXPECTED_OUTPUT,\n  payload: newExpectedOutput\n});\n\nexport const setGuess = (guess: any[]) => ({\n  type: ActionTypes.SET_GUESS,\n  payload: guess\n});\n\nexport const addArgument = () => ({\n  type: ActionTypes.ADD_ARGUMENT\n});\n\nexport const removeArgument = () => ({\n  type: ActionTypes.REMOVE_ARGUMENT\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setExpectedOutput, setGuess } from \"../../redux/actions\";\nimport { ramdaTester } from \"../../utils/guesser\";\nimport { isMobile } from \"is-mobile\";\nimport { Button } from \"../../Components/custom-button/custom-button.component\";\n\nconst Input = styled.input`\n  border-radius: 3px;\n  font-weight: bold;\n  width: 68%;\n  padding: 0 0.5rem;\n`;\n\nconst OutputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 45vw;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 45vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  color: white;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst Select = styled.select`\n  border-radius: 5px;\n  display: \"flex\";\n  justify-content: \"space-around\";\n  width: 28%;\n\n  &:focus {\n    border-color: #aaa;\n    box-shadow: 0 0 1px 2px rgba(59, 153, 252, 0.7);\n    box-shadow: 0 0 0 2px -moz-mac-focusring;\n    color: #222;\n    outline: none;\n  }\n`;\n\ninterface IProps {\n  args: any[];\n  expectedOutput: { type: \"string\"; value: \"string\" };\n  setExpectedOutput: Function;\n  guess: any[];\n  setGuess: Function;\n}\n\nconst OutputContainer: React.FC<IProps> = ({\n  args,\n  expectedOutput,\n  setExpectedOutput,\n  guess,\n  setGuess\n}) => {\n  return (\n    <OutputWrapper>\n      <SingleArgWrapper>\n        <Select\n          value={expectedOutput.type}\n          onChange={e => {\n            setExpectedOutput({\n              ...expectedOutput,\n              type: e.target.value\n            });\n          }}\n        >\n          <option value=\"string\">String </option>\n          <option value=\"number\">number </option>\n          <option value=\"boolean\">boolean</option>\n          <option value=\"object\">object</option>\n          <option value=\"function\">function</option>\n          <option value=\"array\">array</option>\n        </Select>\n        <Input\n          type=\"text\"\n          value={expectedOutput.value}\n          onChange={e =>\n            setExpectedOutput({\n              ...expectedOutput,\n              value: e.target.value\n            })\n          }\n        />\n      </SingleArgWrapper>\n      <Button onClick={() => setGuess(ramdaTester(args, expectedOutput))}>\n        Test\n      </Button>\n      {guess.map(x => (\n        <div key={`${x}`} style={{ color: \"white\" }}>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://ramdajs.com/docs/#${x}`}\n          >\n            {x}\n          </a>\n        </div>\n      ))}\n    </OutputWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args,\n  expectedOutput: state.expectedOutput,\n  guess: state.guess\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setExpectedOutput: (newExpectedOutput: any) =>\n    dispatch(setExpectedOutput(newExpectedOutput)),\n  setGuess: (newGuess: any[]) => dispatch(setGuess(newGuess))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputContainer);\n","import React from \"react\";\nimport { isMobile } from \"is-mobile\";\nimport styled, { css } from \"styled-components\";\n\nimport ArgsContainer from \"./Containers/args/args.container\";\nimport OutputContainer from \"./Containers/output/output.container\";\n\nconst WholeApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  background-color: #282a36;\n  ${() =>\n    isMobile() &&\n    css`\n      flex-direction: column;\n      justify-content: start;\n      align-items: center;\n    `}\n`;\n\nconst App = () => {\n  return (\n    <WholeApp>\n      <div\n        className=\"navbar navbar-inverse\"\n        style={{ margin: \"0\", borderRadius: \"0px\", backgroundColor: \"#884499\" }}\n        role=\"navigation\"\n      >\n        <div className=\"navbar-header\">\n          <a className=\"navbar-brand\" href=\"http://ramdajs.com\">\n            <strong>Ramda Function Guesser </strong>\n            {!isMobile() && <span className=\"version\"> - Ramda v0.27.0</span>}\n          </a>\n        </div>\n        <div className=\"navbar-collapse collapse\"></div>\n      </div>\n      <AppWrapper>\n        <ArgsContainer />\n        <OutputContainer />\n      </AppWrapper>\n    </WholeApp>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <DndProvider backend={Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}