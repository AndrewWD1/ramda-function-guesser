{"version":3,"sources":["redux/action-types.ts","utils/guesser.ts","redux/reducer.ts","redux/store.ts","Containers/args/args.container.tsx","redux/actions.ts","Containers/output/output.container.tsx","App.tsx","index.tsx"],"names":["ActionTypes","javascriptTypes","INTIAL_STATE","args","value","type","expectedOutput","guess","store","createStore","state","action","payload","slice","length","window","__REDUX_DEVTOOLS_EXTENSION__","Input","styled","input","ArgsWrapper","div","SingleArgWrapper","ButtonWrapper","Button","connect","dispatch","setArgs","newArgs","addArgument","removeArgument","map","arg","index","name","selectedValue","onChange","R","x","style","display","justifyContent","width","key","e","target","onClick","OutputWrapper","setExpectedOutput","newExpectedOutput","setGuess","newGuess","possibleGuesses","method","result","push","error","ramdaTester","AppWrapper","main","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.909954d2.chunk.js","sourcesContent":["export const ActionTypes = {\n  SET_ARGS: \"SET_ARGS\",\n  SET_EXPECTED_OUTPUT: \"SET_EXPECTED_OUTPUT\",\n  SET_GUESS: \"SET_GUESS\",\n  ADD_ARGUMENT: \"ADD_ARGUMENT\",\n  REMOVE_ARGUMENT: \"REMOVE_ARGUMENT\"\n};\n","import * as R from \"ramda\";\n\nexport const javascriptTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  function: \"function\",\n  array: \"array\"\n};\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  for (const method in R) {\n    try {\n      let result = (R as any)[method](...args);\n      // eslint-disable-next-line\n      if (R.equals(result, expectedOutput) || result == expectedOutput) {\n        possibleGuesses.push(method);\n      }\n    } catch (error) {}\n  }\n\n  return possibleGuesses;\n};\n","import { ActionTypes } from \"./action-types\";\nimport { javascriptTypes } from \"../utils/guesser\";\n\ninterface arg {\n  value: any;\n  type: string;\n}\n\nconst INTIAL_STATE = {\n  args: [{ value: \"value\", type: javascriptTypes.string }],\n  expectedOutput: \"Expected Output\",\n  guess: [] as any[]\n};\n\nexport const reducer = (\n  state = INTIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_ARGS:\n      return {\n        ...state,\n        args: action.payload\n      };\n    case ActionTypes.SET_EXPECTED_OUTPUT:\n      return {\n        ...state,\n        expectedOutput: action.payload\n      };\n    case ActionTypes.SET_GUESS:\n      return {\n        ...state,\n        guess: action.payload\n      };\n    case ActionTypes.ADD_ARGUMENT:\n      return {\n        ...state,\n        args: [...state.args, { value: \"value\", type: javascriptTypes.string }]\n      };\n    case ActionTypes.REMOVE_ARGUMENT:\n      return {\n        ...state,\n        args: state.args.slice(0, state.args.length - 1)\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n\nimport { reducer } from \"./reducer\";\n\nexport const store = createStore(\n  reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setArgs, addArgument, removeArgument } from \"../../redux/actions\";\nimport * as R from \"ramda\";\nimport { RadioGroup, Radio } from \"react-radio-group\";\n\nconst Input = styled.input`\n  border: 1px solid blac;\n  border-radius: 3px;\n`;\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50vw;\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 50vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n`;\n\ninterface IProps {\n  args: any[];\n  setArgs: Function;\n  addArgument: Function;\n  removeArgument: Function;\n}\n\nconst ArgsContainer: React.FC<IProps> = ({\n  args,\n  setArgs,\n  addArgument,\n  removeArgument\n}) => {\n  return (\n    <ArgsWrapper>\n      {args.map((arg, index) => (\n        <SingleArgWrapper>\n          <RadioGroup\n            name={`${index}-type`}\n            selectedValue={arg.type}\n            onChange={(value: string) => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    type: value\n                  }),\n                  args\n                )\n              );\n            }}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n              width: \"70%\"\n            }}\n          >\n            <label>\n              <Radio value=\"string\" />\n              String\n            </label>\n            <label>\n              <Radio value=\"number\" />\n              number\n            </label>\n            <label>\n              <Radio value=\"boolean\" />\n              boolean\n            </label>\n            <label>\n              <Radio value=\"object\" />\n              object\n            </label>\n            <label>\n              <Radio value=\"function\" />\n              function\n            </label>\n            <label>\n              <Radio value=\"array\" />\n              array\n            </label>\n          </RadioGroup>\n          <Input\n            type=\"text\"\n            value={arg.value}\n            key={index}\n            onChange={e => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    value: e.target.value\n                  }),\n                  args\n                )\n              );\n            }}\n          />\n        </SingleArgWrapper>\n      ))}\n      <ButtonWrapper>\n        <Button onClick={() => addArgument()}>Add an Argument</Button>\n        <Button onClick={() => removeArgument()}>Remove an argument</Button>\n      </ButtonWrapper>\n    </ArgsWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setArgs: (newArgs: any[]) => dispatch(setArgs(newArgs)),\n  addArgument: () => dispatch(addArgument()),\n  removeArgument: () => dispatch(removeArgument())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArgsContainer);\n","import { ActionTypes } from \"./action-types\";\n\nexport const setArgs = (newArgs: any[]) => ({\n  type: ActionTypes.SET_ARGS,\n  payload: newArgs\n});\n\nexport const setExpectedOutput = (newExpectedOutput: any) => ({\n  type: ActionTypes.SET_EXPECTED_OUTPUT,\n  payload: newExpectedOutput\n});\n\nexport const setGuess = (guess: any[]) => ({\n  type: ActionTypes.SET_GUESS,\n  payload: guess\n});\n\nexport const addArgument = () => ({\n  type: ActionTypes.ADD_ARGUMENT\n});\n\nexport const removeArgument = () => ({\n  type: ActionTypes.REMOVE_ARGUMENT\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setExpectedOutput, setGuess } from \"../../redux/actions\";\nimport { ramdaTester } from \"../../utils/guesser\";\n\nconst Input = styled.input`\n  border: 1px solid blac;\n  border-radius: 3px;\n`;\n\nconst OutputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n`;\n\ninterface IProps {\n  args: any[];\n  expectedOutput: any;\n  setExpectedOutput: Function;\n  guess: any[];\n  setGuess: Function;\n}\n\nconst OutputContainer: React.FC<IProps> = ({\n  args,\n  expectedOutput,\n  setExpectedOutput,\n  guess,\n  setGuess\n}) => {\n  return (\n    <OutputWrapper>\n      <form>\n        <Input\n          type=\"text\"\n          value={expectedOutput}\n          onChange={e => setExpectedOutput(e.target.value)}\n        />\n      </form>\n      <Button\n        onClick={() =>\n          setGuess(\n            ramdaTester(\n              args.map(x => x.value),\n              expectedOutput\n            )\n          )\n        }\n      >\n        Test\n      </Button>\n      {guess.map(x => (\n        <div>{x}</div>\n      ))}\n    </OutputWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args,\n  expectedOutput: state.expectedOutput,\n  guess: state.guess\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setExpectedOutput: (newExpectedOutput: any) =>\n    dispatch(setExpectedOutput(newExpectedOutput)),\n  setGuess: (newGuess: any[]) => dispatch(setGuess(newGuess))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ArgsContainer from \"./Containers/args/args.container\";\nimport OutputContainer from \"./Containers/output/output.container\";\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100vw;\n  min-height: 100vh;\n  height: 100%;\n  background-color: rgb(51, 68, 94);\n`;\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <ArgsContainer />\n      <OutputContainer />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}