{"version":3,"sources":["App.tsx","utils/guesser.ts","index.tsx"],"names":["AppWrapper","styled","main","ArgsWrapper","div","OutputAndFunctionWrapper","Input","input","Button","button","App","useState","args","setArgs","expectedOutput","setExpectedOutput","guess","setGuess","map","arg","type","value","onChange","e","length","target","R","x","onClick","possibleGuesses","method","result","push","error","ramdaTester","ReactDOM","render","document","getElementById"],"mappings":"g+BAMA,IAAMA,EAAaC,IAAOC,KAAV,KAQVC,EAAcF,IAAOG,IAAV,KAMXC,EAA2BJ,IAAOG,IAAV,KAMxBE,EAAQL,IAAOM,MAAV,KAKLC,EAASP,IAAOQ,OAAV,KA8CGC,EA5CH,WAAO,IAAD,EACQC,mBAAS,CAAC,UADlB,mBACTC,EADS,KACHC,EADG,OAG4BF,mBAC1C,mBAJc,mBAGTG,EAHS,KAGOC,EAHP,OAOUJ,mBAAS,IAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShB,OACE,kBAACjB,EAAD,KACE,kBAACG,EAAD,KACE,8BACGS,EAAKM,KAAI,SAAAC,GAAG,OACX,kBAACb,EAAD,CACEc,KAAK,OACLC,MAAOT,EAAK,GACZU,SAAU,SAAAC,GACY,IAAhBX,EAAKY,OAAcX,EAAQ,CAACU,EAAEE,OAAOJ,QACpCR,EAAQa,IAAS,GAAG,SAAAC,GAAC,OAAIJ,EAAEE,OAAOJ,QAAOT,YAMxD,kBAACP,EAAD,KACE,8BACE,kBAACC,EAAD,CACEc,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAkBQ,EAAEE,OAAOJ,WAG9C,kBAACb,EAAD,CAAQoB,QAAS,kBAAMX,EChEJ,SAACL,EAAaE,GACvC,IAAMe,EAAyB,GAE/B,IAAK,IAAMC,KAAUJ,EACnB,IAAK,IAAD,EACEK,GAAU,EAAAL,GAAUI,GAAX,oBAAsBlB,KAC/Bc,IAASK,EAAQjB,IAAmBiB,GAAUjB,IAChDe,EAAgBG,KAAKF,GAEvB,MAAOG,IAGX,OAAOJ,EDoD+BK,CAAYtB,EAAME,MAAlD,QAGCE,EAAME,KAAI,SAAAS,GAAC,OACV,6BAAMA,SEjEhBQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b3b4afbb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as R from \"ramda\";\nimport { ramdaTester } from \"./utils/guesser\";\nimport \"./App.css\";\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(51, 68, 94);\n`;\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst OutputAndFunctionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  border: 1px solid blac;\n  border-radius: 3px;\n`;\n\nconst Button = styled.button``;\n\nconst App = () => {\n  const [args, setArgs] = useState([\"value\"] as any[]);\n\n  const [expectedOutput, setExpectedOutput] = useState(\n    \"Expected Output\" as any\n  );\n\n  const [guess, setGuess] = useState([] as any[]);\n\n  return (\n    <AppWrapper>\n      <ArgsWrapper>\n        <form>\n          {args.map(arg => (\n            <Input\n              type=\"text\"\n              value={args[0]}\n              onChange={e => {\n                if (args.length === 0) setArgs([e.target.value]);\n                else setArgs(R.adjust(0, x => e.target.value, args));\n              }}\n            />\n          ))}\n        </form>\n      </ArgsWrapper>\n      <OutputAndFunctionWrapper>\n        <form>\n          <Input\n            type=\"text\"\n            value={expectedOutput}\n            onChange={e => setExpectedOutput(e.target.value)}\n          />\n        </form>\n        <Button onClick={() => setGuess(ramdaTester(args, expectedOutput))}>\n          Test\n        </Button>\n        {guess.map(x => (\n          <div>{x}</div>\n        ))}\n      </OutputAndFunctionWrapper>\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import * as R from \"ramda\";\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  for (const method in R) {\n    try {\n      let result = (R as any)[method](...args);\n      if (R.equals(result, expectedOutput) || result == expectedOutput) {\n        possibleGuesses.push(method);\n      }\n    } catch (error) {}\n  }\n\n  return possibleGuesses;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}