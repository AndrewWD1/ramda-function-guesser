{"version":3,"sources":["utils/guesser.ts","redux/action-types.ts","redux/reducer.ts","redux/store.ts","redux/actions.ts","Containers/args/args.container.tsx","Containers/output/output.container.tsx","Components/json-alert/json-alert.component.tsx","App.tsx","index.tsx"],"names":["javascriptTypes","string","number","boolean","object","function","array","parseNumber","value","Number","parseBoolean","parseFunction","eval","parseObject","JSON","parse","parseArray","parseArg","arg","type","error","ramdaTester","args","expectedOutput","possibleGuesses","newArr","map","newExpectedOutput","method","R","result","push","ActionTypes","INTIAL_STATE","guess","JsonAlertToggle","store","createStore","state","action","payload","slice","length","window","__REDUX_DEVTOOLS_EXTENSION__","confirmJsonAlert","Input","styled","input","ArgsWrapper","div","isMobile","css","SingleArgWrapper","ButtonWrapper","Button","Select","select","connect","dispatch","setArgs","newArgs","addArgument","removeArgument","index","onChange","e","x","target","key","onClick","OutputWrapper","setExpectedOutput","setGuess","newGuess","style","color","rel","href","JsonAlertWrapper","ConfirmButton","WholeApp","AppWrapper","main","useEffect","document","addEventListener","console","log","className","margin","borderRadius","backgroundColor","role","data-toggle","data-target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a03fe63a.chunk.js","sourcesContent":["import * as R from \"ramda\";\n\nexport const javascriptTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  function: \"function\",\n  array: \"array\"\n};\n\nconst parseNumber = (value: string) => Number(value);\n\nconst parseBoolean = (value: string) => {\n  if (value === \"false\") return false;\n  if (value === \"true\") return true;\n  return !!value;\n};\n\n// eslint-disable-next-line\nconst parseFunction = (value: string) => eval(value);\n\nconst parseObject = (value: string) => JSON.parse(value);\n\nconst parseArray = (value: string) => JSON.parse(value);\n\nexport const parseArg = (arg: { value: string; type: string }): any => {\n  try {\n    switch (arg.type) {\n      case javascriptTypes.string:\n        return arg.value;\n      case javascriptTypes.number:\n        return parseNumber(arg.value);\n      case javascriptTypes.boolean:\n        return parseBoolean(arg.value);\n      case javascriptTypes.object:\n        return parseObject(arg.value);\n      case javascriptTypes.function:\n        // eslint-disable-next-line\n        return parseFunction(arg.value);\n      case javascriptTypes.array:\n        return parseArray(arg.value);\n    }\n  } catch (error) {}\n};\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  const newArr = args.map(parseArg);\n  let newExpectedOutput = parseArg(expectedOutput);\n\n  for (const method in R) {\n    if (method === \"unfold\") {\n      /**\n       * !: skipping unfold for now due to memory allocation error when\n       * !: looking for a different method. The offending arguments\n       * !: are R.unfold(x => [x], [1, 2])\n       */\n    } else {\n      try {\n        let result = (R as any)[method](...newArr);\n        // eslint-disable-next-line\n        if (R.equals(result, newExpectedOutput)) {\n          possibleGuesses.push(method);\n        }\n      } catch (error) {}\n    }\n  }\n\n  return possibleGuesses;\n};\n","export const ActionTypes = {\n  SET_ARGS: \"SET_ARGS\",\n  SET_EXPECTED_OUTPUT: \"SET_EXPECTED_OUTPUT\",\n  SET_GUESS: \"SET_GUESS\",\n  ADD_ARGUMENT: \"ADD_ARGUMENT\",\n  REMOVE_ARGUMENT: \"REMOVE_ARGUMENT\",\n  CONFIRM_JSON_ALERT: \"CONFIRM_JSON_ALERT\"\n};\n","import { ActionTypes } from \"./action-types\";\nimport { javascriptTypes } from \"../utils/guesser\";\n\ninterface arg {\n  value: any;\n  type: string;\n}\n\nconst INTIAL_STATE = {\n  args: [{ value: \"value\", type: javascriptTypes.string }],\n  expectedOutput: { type: javascriptTypes.string, value: \"Expected Output\" },\n  guess: [] as any[],\n  JsonAlertToggle: false\n};\n\nexport const reducer = (\n  state = INTIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_ARGS:\n      return {\n        ...state,\n        args: action.payload\n      };\n    case ActionTypes.SET_EXPECTED_OUTPUT:\n      return {\n        ...state,\n        expectedOutput: action.payload\n      };\n    case ActionTypes.SET_GUESS:\n      return {\n        ...state,\n        guess: action.payload\n      };\n    case ActionTypes.ADD_ARGUMENT:\n      return {\n        ...state,\n        args: [...state.args, { value: \"value\", type: javascriptTypes.string }]\n      };\n    case ActionTypes.REMOVE_ARGUMENT:\n      return {\n        ...state,\n        args: state.args.slice(0, state.args.length - 1)\n      };\n    case ActionTypes.CONFIRM_JSON_ALERT:\n      return {\n        ...state,\n        JsonAlertToggle: true\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\n\nimport { reducer } from \"./reducer\";\n\nexport const store = createStore(\n  reducer,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import { ActionTypes } from \"./action-types\";\n\nexport const setArgs = (newArgs: any[]) => ({\n  type: ActionTypes.SET_ARGS,\n  payload: newArgs\n});\n\nexport const setExpectedOutput = (newExpectedOutput: any) => ({\n  type: ActionTypes.SET_EXPECTED_OUTPUT,\n  payload: newExpectedOutput\n});\n\nexport const setGuess = (guess: any[]) => ({\n  type: ActionTypes.SET_GUESS,\n  payload: guess\n});\n\nexport const addArgument = () => ({\n  type: ActionTypes.ADD_ARGUMENT\n});\n\nexport const removeArgument = () => ({\n  type: ActionTypes.REMOVE_ARGUMENT\n});\n\nexport const confirmJsonAlert = () => ({\n  type: ActionTypes.CONFIRM_JSON_ALERT\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setArgs, addArgument, removeArgument } from \"../../redux/actions\";\nimport * as R from \"ramda\";\nimport { isMobile } from \"is-mobile\";\n\nconst Input = styled.input`\n  font-weight: bold;\n  border-radius: 3px;\n  width: 68%;\n  padding: 0 0.5rem;\n`;\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 45vw;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 45vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  color: white;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n  color: white;\n`;\n\nconst Select = styled.select`\n  border-radius: 5px;\n  display: \"flex\";\n  justify-content: \"space-around\";\n  width: 28%;\n\n  &:focus {\n    border-color: #aaa;\n    box-shadow: 0 0 1px 2px rgba(59, 153, 252, 0.7);\n    box-shadow: 0 0 0 2px -moz-mac-focusring;\n    color: #222;\n    outline: none;\n  }\n`;\n\ninterface IProps {\n  args: any[];\n  setArgs: Function;\n  addArgument: Function;\n  removeArgument: Function;\n}\n\nconst ArgsContainer: React.FC<IProps> = ({\n  args,\n  setArgs,\n  addArgument,\n  removeArgument\n}) => {\n  return (\n    <ArgsWrapper>\n      {args.map((arg, index) => (\n        <SingleArgWrapper>\n          <Select\n            value={arg.type}\n            onChange={e => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    type: e.target.value\n                  }),\n                  args\n                )\n              );\n            }}\n          >\n            <option value=\"string\">String </option>\n            <option value=\"number\">number </option>\n            <option value=\"boolean\">boolean</option>\n            <option value=\"object\">object</option>\n            <option value=\"function\">function</option>\n            <option value=\"array\">array</option>\n          </Select>\n          <Input\n            type=\"text\"\n            value={arg.value}\n            key={index}\n            onChange={e => {\n              setArgs(\n                R.adjust(\n                  index,\n                  x => ({\n                    ...x,\n                    value: e.target.value\n                  }),\n                  args\n                )\n              );\n            }}\n          />\n        </SingleArgWrapper>\n      ))}\n      <ButtonWrapper>\n        <Button onClick={() => addArgument()}>Add an Argument</Button>\n        <Button onClick={() => removeArgument()}>Remove an argument</Button>\n      </ButtonWrapper>\n    </ArgsWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setArgs: (newArgs: any[]) => dispatch(setArgs(newArgs)),\n  addArgument: () => dispatch(addArgument()),\n  removeArgument: () => dispatch(removeArgument())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArgsContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled, { css } from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setExpectedOutput, setGuess } from \"../../redux/actions\";\nimport { ramdaTester } from \"../../utils/guesser\";\nimport { isMobile } from \"is-mobile\";\n\nconst Input = styled.input`\n  border-radius: 3px;\n  font-weight: bold;\n  width: 68%;\n  padding: 0 0.5rem;\n`;\n\nconst OutputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 45vw;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n  color: white;\n`;\n\nconst SingleArgWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 45vw;\n  padding: 5px;\n  margin: 5px;\n  border: 1px solid black;\n  border-radius: 3px;\n  color: white;\n  ${() =>\n    isMobile() &&\n    css`\n      width: 95%;\n    `}\n`;\n\nconst Select = styled.select`\n  border-radius: 5px;\n  display: \"flex\";\n  justify-content: \"space-around\";\n  width: 28%;\n\n  &:focus {\n    border-color: #aaa;\n    box-shadow: 0 0 1px 2px rgba(59, 153, 252, 0.7);\n    box-shadow: 0 0 0 2px -moz-mac-focusring;\n    color: #222;\n    outline: none;\n  }\n`;\n\ninterface IProps {\n  args: any[];\n  expectedOutput: { type: \"string\"; value: \"string\" };\n  setExpectedOutput: Function;\n  guess: any[];\n  setGuess: Function;\n}\n\nconst OutputContainer: React.FC<IProps> = ({\n  args,\n  expectedOutput,\n  setExpectedOutput,\n  guess,\n  setGuess\n}) => {\n  return (\n    <OutputWrapper>\n      <SingleArgWrapper>\n        <Select\n          value={expectedOutput.type}\n          onChange={e => {\n            setExpectedOutput({\n              ...expectedOutput,\n              type: e.target.value\n            });\n          }}\n        >\n          <option value=\"string\">String </option>\n          <option value=\"number\">number </option>\n          <option value=\"boolean\">boolean</option>\n          <option value=\"object\">object</option>\n          <option value=\"function\">function</option>\n          <option value=\"array\">array</option>\n        </Select>\n        <Input\n          type=\"text\"\n          value={expectedOutput.value}\n          onChange={e =>\n            setExpectedOutput({\n              ...expectedOutput,\n              value: e.target.value\n            })\n          }\n        />\n      </SingleArgWrapper>\n      <Button onClick={() => setGuess(ramdaTester(args, expectedOutput))}>\n        Test\n      </Button>\n      {guess.map(x => (\n        <div style={{ color: \"white\" }}>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://ramdajs.com/docs/#${x}`}\n          >\n            {x}\n          </a>\n        </div>\n      ))}\n    </OutputWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args,\n  expectedOutput: state.expectedOutput,\n  guess: state.guess\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setExpectedOutput: (newExpectedOutput: any) =>\n    dispatch(setExpectedOutput(newExpectedOutput)),\n  setGuess: (newGuess: any[]) => dispatch(setGuess(newGuess))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { confirmJsonAlert } from \"../../redux/actions\";\n\nconst JsonAlertWrapper = styled.div`\n  background-color: #e1d0e6;\n  color: #8d4c9d;\n  font-weight: bold;\n  font-size: 2rem;\n  padding: 1rem;\n  text-align: center;\n  width: 200px;\n  position: absolute;\n  left: 50%;\n  margin-left: -100px;\n  top: 30%;\n  margin-top: -50px;\n  border: 1px solid black;\n  border-radius: 4px;\n`;\n\nconst ConfirmButton = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  background-color: #a766b7;\n  color: #e1d0e6;\n  cursor: pointer;\n`;\n\nconst JsonAlert: React.FC<{ confirmJsonAlert: Function }> = ({\n  confirmJsonAlert\n}) => (\n  <JsonAlertWrapper>\n    Please enter objects as JSON <br></br>\n    <ConfirmButton onClick={() => confirmJsonAlert()}>confirm</ConfirmButton>\n  </JsonAlertWrapper>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  confirmJsonAlert: () => dispatch(confirmJsonAlert())\n});\n\nexport default connect(null, mapDispatchToProps)(JsonAlert);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { confirmJsonAlert } from \"./redux/actions\";\nimport { isMobile } from \"is-mobile\";\nimport styled, { css } from \"styled-components\";\n\nimport ArgsContainer from \"./Containers/args/args.container\";\nimport OutputContainer from \"./Containers/output/output.container\";\nimport JsonAlert from \"./Components/json-alert/json-alert.component\";\n\nconst WholeApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100%;\n  min-height: 100vh;\n  height: 100%;\n  background-color: #282a36;\n  ${() =>\n    isMobile() &&\n    css`\n      flex-direction: column;\n      justify-content: start;\n      align-items: center;\n    `}\n`;\n\nconst App: React.FC<{\n  JsonAlertToggle: boolean;\n  confirmJsonAlert: Function;\n}> = ({ JsonAlertToggle, confirmJsonAlert }) => {\n  useEffect(() => {\n    document.addEventListener(\"click\", () => {\n      if (!JsonAlertToggle) {\n        console.log(JsonAlertToggle);\n        confirmJsonAlert();\n      }\n    });\n  });\n\n  return (\n    <WholeApp>\n      <div\n        className=\"navbar navbar-inverse\"\n        style={{ margin: \"0\", borderRadius: \"0px\", backgroundColor: \"#884499\" }}\n        role=\"navigation\"\n      >\n        <div className=\"navbar-header\">\n          <button\n            type=\"button\"\n            className=\"navbar-toggle\"\n            data-toggle=\"collapse\"\n            data-target=\".navbar-collapse\"\n          >\n            <span className=\"sr-only\">Toggle navigation</span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n          </button>\n          <a className=\"navbar-brand\" href=\"http://ramdajs.com\">\n            <strong>Ramda </strong>\n            <span className=\"version\">v0.27.0</span>\n          </a>\n        </div>\n        <div className=\"navbar-collapse collapse\"></div>\n      </div>\n      {!JsonAlertToggle && <JsonAlert />}\n      <AppWrapper>\n        <ArgsContainer />\n        <OutputContainer />\n      </AppWrapper>\n    </WholeApp>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  JsonAlertToggle: state.JsonAlertToggle\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  confirmJsonAlert: () => dispatch(confirmJsonAlert())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}