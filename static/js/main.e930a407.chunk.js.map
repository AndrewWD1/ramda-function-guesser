{"version":3,"sources":["redux/action-types.ts","utils/guesser.ts","redux/reducer.ts","redux/store.ts","Containers/args/args.container.tsx","redux/actions.ts","Containers/output/output.container.tsx","App.tsx","index.tsx"],"names":["ActionTypes","javascriptTypes","INTIAL_STATE","args","value","type","expectedOutput","guess","middleware","logger","store","createStore","state","action","payload","slice","length","applyMiddleware","Input","styled","input","ArgsWrapper","div","Button","connect","dispatch","setArgs","newArgs","addArgument","removeArgument","map","arg","index","key","onChange","e","target","R","x","onClick","OutputWrapper","setExpectedOutput","newExpectedOutput","setGuess","newGuess","possibleGuesses","method","result","push","error","ramdaTester","AppWrapper","main","App","ReactDOM","render","document","getElementById"],"mappings":"6RAAaA,EACD,WADCA,EAEU,sBAFVA,EAGA,YAHAA,EAIG,eAJHA,EAKM,kB,eCHNC,EACH,SCKJC,EAAe,CACnBC,KAAM,CAAC,CAAEC,MAAO,QAASC,KAAMJ,IAC/BK,eAAgB,kBAChBC,MAAO,ICNHC,EAAa,CAACC,KAEPC,EAAQC,aDOE,WAGjB,IAFJC,EAEG,uDAFKV,EACRW,EACG,uCACH,OAAQA,EAAOR,MACb,KAAKL,EACH,OAAO,eACFY,EADL,CAEET,KAAMU,EAAOC,UAEjB,KAAKd,EACH,OAAO,eACFY,EADL,CAEEN,eAAgBO,EAAOC,UAE3B,KAAKd,EACH,OAAO,eACFY,EADL,CAEEL,MAAOM,EAAOC,UAElB,KAAKd,EACH,OAAO,eACFY,EADL,CAEET,KAAK,GAAD,mBAAMS,EAAMT,MAAZ,CAAkB,CAAEC,MAAO,QAASC,KAAMJ,OAElD,KAAKD,EACH,OAAO,eACFY,EADL,CAEET,KAAMS,EAAMT,KAAKY,MAAM,EAAGH,EAAMT,KAAKa,OAAS,KAElD,QACE,OAAOJ,KCtC6BK,IAAe,WAAf,EAAmBT,I,0WCA7D,IAAMU,EAAQC,IAAOC,MAAV,KAKLC,EAAcF,IAAOG,IAAV,KAMXC,EAASJ,IAAOG,IAAV,KA4DGE,eAVS,SAACZ,GAAD,MAAiB,CACvCT,KAAMS,EAAMT,SAGa,SAACsB,GAAD,MAAyB,CAClDC,QAAS,SAACC,GAAD,OAAoBF,ECvER,SAACE,GAAD,MAAqB,CAC1CtB,KAAML,EACNc,QAASa,GDqE6BD,CAAQC,KAC9CC,YAAa,kBAAMH,ECzDa,CAChCpB,KAAML,KDyDN6B,eAAgB,kBAAMJ,ECtDa,CACnCpB,KAAML,QDwDOwB,EAnDyB,SAAC,GAKlC,IAJLrB,EAII,EAJJA,KACAuB,EAGI,EAHJA,QACAE,EAEI,EAFJA,YACAC,EACI,EADJA,eAEA,OACE,8BACE,kBAACR,EAAD,KACGlB,EAAK2B,KAAI,SAACC,EAAKC,GAAN,OACR,oCACE,kBAACd,EAAD,CACEb,KAAK,OACLD,MAAO2B,EAAI3B,MACX6B,IAAKD,EACLE,SAAU,SAAAC,GACJhC,IACkB,IAAhBA,EAAKa,OAAcU,EAAQ,CAACS,EAAEC,OAAOhC,QAEvCsB,EACEW,IACEL,GACA,SAAAM,GAAC,sBACIA,EADJ,CAEClC,MAAO+B,EAAEC,OAAOhC,UAElBD,YAQhB,kBAACoB,EAAD,CAAQgB,QAAS,kBAAMX,MAAvB,mBACA,kBAACL,EAAD,CAAQgB,QAAS,kBAAMV,MAAvB,2B,ybEvDR,IAAMX,EAAQC,IAAOC,MAAV,KAKLoB,EAAgBrB,IAAOG,IAAV,KAMbC,EAASJ,IAAOG,IAAV,KA+DGE,eAZS,SAACZ,GAAD,MAAiB,CACvCT,KAAMS,EAAMT,KACZG,eAAgBM,EAAMN,eACtBC,MAAOK,EAAML,UAGY,SAACkB,GAAD,MAAyB,CAClDgB,kBAAmB,SAACC,GAAD,OACjBjB,EDtE6B,SAACiB,GAAD,MAA6B,CAC5DrC,KAAML,EACNc,QAAS4B,GCoEED,CAAkBC,KAC7BC,SAAU,SAACC,GAAD,OAAqBnB,EDlEU,CACzCpB,KAAML,EACNc,QCgEiD8B,QAGpCpB,EA/C2B,SAAC,GAMpC,IALLrB,EAKI,EALJA,KACAG,EAII,EAJJA,eACAmC,EAGI,EAHJA,kBACAlC,EAEI,EAFJA,MACAoC,EACI,EADJA,SAEA,OACE,kBAACH,EAAD,KACE,8BACE,kBAAC,EAAD,CACEnC,KAAK,OACLD,MAAOE,EACP4B,SAAU,SAAAC,GAAC,OAAIM,EAAkBN,EAAEC,OAAOhC,WAG9C,kBAAC,EAAD,CACEmC,QAAS,kBACPI,ELzCiB,SAACxC,EAAaG,GACvC,IAAMuC,EAAyB,GAE/B,IAAK,IAAMC,KAAUT,EACnB,IAAK,IAAD,EACEU,GAAU,EAAAV,GAAUS,GAAX,oBAAsB3C,KAE/BkC,IAASU,EAAQzC,IAAmByC,GAAUzC,IAChDuC,EAAgBG,KAAKF,GAEvB,MAAOG,IAGX,OAAOJ,EK6BGK,CACE/C,EAAK2B,KAAI,SAAAQ,GAAC,OAAIA,EAAElC,SAChBE,MALR,QAYCC,EAAMuB,KAAI,SAAAQ,GAAC,OACV,6BAAMA,U,oMCzDd,IAAMa,EAAahC,IAAOiC,KAAV,KAiBDC,EATH,WACV,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXNG,IAASC,OACP,kBAAC,IAAD,CAAU7C,MAAOA,GACf,kBAAC,EAAD,OAEF8C,SAASC,eAAe,W","file":"static/js/main.e930a407.chunk.js","sourcesContent":["export const ActionTypes = {\n  SET_ARGS: \"SET_ARGS\",\n  SET_EXPECTED_OUTPUT: \"SET_EXPECTED_OUTPUT\",\n  SET_GUESS: \"SET_GUESS\",\n  ADD_ARGUMENT: \"ADD_ARGUMENT\",\n  REMOVE_ARGUMENT: \"REMOVE_ARGUMENT\"\n};\n","import * as R from \"ramda\";\n\nexport const javascriptTypes = {\n  string: \"string\",\n  number: \"number\",\n  boolean: \"boolean\",\n  object: \"object\",\n  function: \"function\",\n  array: \"array\"\n};\n\nexport const ramdaTester = (args: any[], expectedOutput: any): any[] => {\n  const possibleGuesses: any[] = [];\n\n  for (const method in R) {\n    try {\n      let result = (R as any)[method](...args);\n      // eslint-disable-next-line\n      if (R.equals(result, expectedOutput) || result == expectedOutput) {\n        possibleGuesses.push(method);\n      }\n    } catch (error) {}\n  }\n\n  return possibleGuesses;\n};\n","import { ActionTypes } from \"./action-types\";\nimport { javascriptTypes } from \"../utils/guesser\";\n\ninterface arg {\n  value: any;\n  type: string;\n}\n\nconst INTIAL_STATE = {\n  args: [{ value: \"value\", type: javascriptTypes.string }],\n  expectedOutput: \"Expected Output\",\n  guess: [] as any[]\n};\n\nexport const reducer = (\n  state = INTIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_ARGS:\n      return {\n        ...state,\n        args: action.payload\n      };\n    case ActionTypes.SET_EXPECTED_OUTPUT:\n      return {\n        ...state,\n        expectedOutput: action.payload\n      };\n    case ActionTypes.SET_GUESS:\n      return {\n        ...state,\n        guess: action.payload\n      };\n    case ActionTypes.ADD_ARGUMENT:\n      return {\n        ...state,\n        args: [...state.args, { value: \"value\", type: javascriptTypes.string }]\n      };\n    case ActionTypes.REMOVE_ARGUMENT:\n      return {\n        ...state,\n        args: state.args.slice(0, state.args.length - 1)\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\n\nimport { reducer } from \"./reducer\";\n\nconst middleware = [logger];\n\nexport const store = createStore(reducer, applyMiddleware(...middleware));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setArgs, addArgument, removeArgument } from \"../../redux/actions\";\nimport * as R from \"ramda\";\n\nconst Input = styled.input`\n  border: 1px solid blac;\n  border-radius: 3px;\n`;\n\nconst ArgsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.div``;\n\ninterface IProps {\n  args: any[];\n  setArgs: Function;\n  addArgument: Function;\n  removeArgument: Function;\n}\n\nconst ArgsContainer: React.FC<IProps> = ({\n  args,\n  setArgs,\n  addArgument,\n  removeArgument\n}) => {\n  return (\n    <form>\n      <ArgsWrapper>\n        {args.map((arg, index) => (\n          <>\n            <Input\n              type=\"text\"\n              value={arg.value}\n              key={index}\n              onChange={e => {\n                if (args) {\n                  if (args.length === 0) setArgs([e.target.value]);\n                  else\n                    setArgs(\n                      R.adjust(\n                        index,\n                        x => ({\n                          ...x,\n                          value: e.target.value\n                        }),\n                        args\n                      )\n                    );\n                }\n              }}\n            />\n          </>\n        ))}\n        <Button onClick={() => addArgument()}>Add an Argument</Button>\n        <Button onClick={() => removeArgument()}>Remove an argument</Button>\n      </ArgsWrapper>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setArgs: (newArgs: any[]) => dispatch(setArgs(newArgs)),\n  addArgument: () => dispatch(addArgument()),\n  removeArgument: () => dispatch(removeArgument())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArgsContainer);\n","import { ActionTypes } from \"./action-types\";\n\nexport const setArgs = (newArgs: any[]) => ({\n  type: ActionTypes.SET_ARGS,\n  payload: newArgs\n});\n\nexport const setExpectedOutput = (newExpectedOutput: any) => ({\n  type: ActionTypes.SET_EXPECTED_OUTPUT,\n  payload: newExpectedOutput\n});\n\nexport const setGuess = (guess: any[]) => ({\n  type: ActionTypes.SET_GUESS,\n  payload: guess\n});\n\nexport const addArgument = () => ({\n  type: ActionTypes.ADD_ARGUMENT\n});\n\nexport const removeArgument = () => ({\n  type: ActionTypes.REMOVE_ARGUMENT\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { Dispatch } from \"redux\";\nimport { setExpectedOutput, setGuess } from \"../../redux/actions\";\nimport { ramdaTester } from \"../../utils/guesser\";\n\nconst Input = styled.input`\n  border: 1px solid blac;\n  border-radius: 3px;\n`;\n\nconst OutputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Button = styled.div`\n  cursor: pointer;\n  border-radius: 3px;\n  border: 1px solid black;\n  padding: 2px 10px;\n  margin: 5px;\n`;\n\ninterface IProps {\n  args: any[];\n  expectedOutput: any;\n  setExpectedOutput: Function;\n  guess: any[];\n  setGuess: Function;\n}\n\nconst OutputContainer: React.FC<IProps> = ({\n  args,\n  expectedOutput,\n  setExpectedOutput,\n  guess,\n  setGuess\n}) => {\n  return (\n    <OutputWrapper>\n      <form>\n        <Input\n          type=\"text\"\n          value={expectedOutput}\n          onChange={e => setExpectedOutput(e.target.value)}\n        />\n      </form>\n      <Button\n        onClick={() =>\n          setGuess(\n            ramdaTester(\n              args.map(x => x.value),\n              expectedOutput\n            )\n          )\n        }\n      >\n        Test\n      </Button>\n      {guess.map(x => (\n        <div>{x}</div>\n      ))}\n    </OutputWrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  args: state.args,\n  expectedOutput: state.expectedOutput,\n  guess: state.guess\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setExpectedOutput: (newExpectedOutput: any) =>\n    dispatch(setExpectedOutput(newExpectedOutput)),\n  setGuess: (newGuess: any[]) => dispatch(setGuess(newGuess))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ArgsContainer from \"./Containers/args/args.container\";\nimport OutputContainer from \"./Containers/output/output.container\";\n\nconst AppWrapper = styled.main`\n  display: flex;\n  justify-content: space-around;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(51, 68, 94);\n`;\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <ArgsContainer />\n      <OutputContainer />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}